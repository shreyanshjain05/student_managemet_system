generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ProfilePersonal {
  student_id      String            @id
  name            String
  department      String
  bio             String
  phone           String?
  email           String?
  address         String
  city            String
  state           String
  zip_code        String
  assignments     Assignment[]
  assignmentsPast AssignmentsPast[]
  coursesCurrent  CoursesCurrent[]
  coursesPast     CoursesPast[]
  profileAcademic ProfileAcademic?
  scheduleCurrent ScheduleCurrent[]
  scheduleEvents  ScheduleEvents[]
  userAuth        UserAuth?
  userSettings    UserSettings?
}

model ProfileAcademic {
  student_id          String          @id
  program             String
  academic_status     String
  enrollment_status   String
  academic_advisor    String
  advisor_email       String
  expected_graduation DateTime
  student             ProfilePersonal @relation(fields: [student_id], references: [student_id])
}

model CoursesCurrent {
  course_code           String            @id
  student_id            String
  course_name           String
  credits               Float
  grade                 String
  attendance_percentage Float
  instructor            String
  description           String
  assignments           Assignment[]
  student               ProfilePersonal   @relation(fields: [student_id], references: [student_id])
  schedules             ScheduleCurrent[]
}

model CoursesPast {
  course_code String          @id
  student_id  String
  course_name String
  credits     Float
  grade       String
  semester    String
  student     ProfilePersonal @relation(fields: [student_id], references: [student_id])
}

model ScheduleCurrent {
  id          String          @id @default(uuid())
  student_id  String
  day         String
  course_code String
  course_name String
  time        String
  room        String
  instructor  String
  course      CoursesCurrent  @relation(fields: [course_code], references: [course_code])
  student     ProfilePersonal @relation(fields: [student_id], references: [student_id])
}

model ScheduleEvents {
  id         String          @id @default(uuid())
  student_id String
  title      String
  date       DateTime
  time       String
  location   String
  student    ProfilePersonal @relation(fields: [student_id], references: [student_id])
}

model Assignment {
  id             String   @id @default(uuid())
  student_id     String
  course_code    String
  course_name    String
  title          String
  description    String
  created_at     DateTime @default(now())
  due_date       DateTime
  status         String   
  progress       Int
  submitted_date DateTime?
  grade          String?
  feedback       String?
  course         CoursesCurrent @relation(fields: [course_code], references: [course_code])
  student        ProfilePersonal @relation(fields: [student_id], references: [student_id])
}

model AssignmentsPast {
  id          String          @id @default(uuid())
  student_id  String
  course_code String
  title       String
  due_date    DateTime
  status      String
  grade       String
  student     ProfilePersonal @relation(fields: [student_id], references: [student_id])
}

model UserAuth {
  student_id           String          @id
  password_hash        String
  last_login           DateTime
  two_factor_enabled   Boolean
  login_alerts_enabled Boolean
  student              ProfilePersonal @relation(fields: [student_id], references: [student_id])
}

model UserSettings {
  student_id String          @id
  theme      String
  font_size  String
  language   String
  student    ProfilePersonal @relation(fields: [student_id], references: [student_id])
}
